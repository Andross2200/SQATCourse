---
title: 6. Model based testing
author:
  - name: Gabor Arpad Nemeth
    orcid: 0000-0003-2554-9860
    email: nga@inf.elte.hu
    affiliation:
      - name: Eötvös Loránd University (Hungary)
      - department : Computer Algebra
---


![](../images/model_based/Model-based%20testing-1st%20part_0.jpg)

## Original material
This page is a **work-in-progress**, the original materials can be accessed at [ik-elte-sharepoint](no_link)

## Agenda

Short agenda:

1. Theory background of MBT \(Model\-based testing\)
2. FSM \(Finite State Machine\) models
3. Editing specification models with GraphWalker Studio
4. Generate simple test sequences with…
    * GraphWalker Studio and
    * Model >> Test >> Relax

## Degree of automization 


```{mermaid}
graph TD
    classDef sub opacity:0
    classDef note fill:#ffd, stroke:#ccb
    
     A(Degree of automatization) --> B(from the view of test execution) --> C(Manual / Automated)
  A --> D(from the view of the test design) --> E(Manually designed) --> F(Generated)
       
    subgraph subE [" "]
        E
        noteE[ Test cases are designed by a test engineer based on specification]
    end

    subgraph subF [" "]
        F
        noteF[ Test cases are generated automatically from a test model or from the specification -> MBT Model Based Testing]
    end
    
    class subA,subB,subC sub
    class noteA,noteB,noteC note


```

## Model based testing

Conformance testing
  
  * Given
      * Specification model (white box)
      * Implementation model (black box)
  * Test if the implementation conforms to the specification?
      * I.E. determine if the two corresponding model descriptions are equivalent 

```{mermaid}
graph TD
    classDef sub opacity:0
    classDef note fill:#ffd, stroke:#ccb
    
     A <--> B --> C
     B --> D 

    subgraph subA [" "]
        A
        noteE[Specification model]
    end

    subgraph subB [" "]
        B
        noteF[Implementation model]
    end

```


## FSM (Formal specification model)

## FSM-based conformance testing 

```{mermaid}
graph TD
    classDef sub opacity:0
    classDef note fill:#ffd, stroke:#ccb
    
     A(Specification: FSM white box) <--> B(Implementation: FSM Impl)

```

```{mermaid}
graph TD
    classDef sub opacity:0
    classDef note fill:#ffd, stroke:#ccb
    
     A(Requirements) --> B(Specification FSM M) --> C(Implementation FSM M, SUT)
     B --> D[ Test suite: test case 1, ..., test case n]
```

```{mermaid}
graph TD
    classDef sub opacity:0
    classDef note fill:#ffd, stroke:#ccb
    
     A[Test suite] -->|Input| B(Implementation FSM Impl, SUT) -->|Observed output| C(Tester)
     A -->|Expected output| C
     C --> D{Verdict}
     

```


### FSM exercise 
::: {.callout-note}
## [Marklin Battery-Operated Signal 1.](https://www.maerklin.de/en/products/details/article/72201/)
1. Explore the functionality of the given device
and write a specification for it

  * The device has 2 LEDs (red and green), a 2-way switch and a press button
  * The 2-way switch turns the device off or on. When the device is turned on,
the green LED lights up.
  * The button can be used to change which LED lights; red or green.
  * If no button is pressed for 7 secs the device changes the lights.

2. Create FSM based on the specification
  * Create state transition table
  * Create state transition graph 

3. Design an input/output sequence to test all functionalities of the
specification

*Waiting for 7 seconds can be handled as special timeout input message*
:::


## FSM exercise - solution graph
```{dot}
//| label: fig-toy_train_signal
//| fig-cap: "State transition graph"
//| file: ../graphs/toy_train_signal.dot
```


## FSM exercise - state transition table
|             | Switch on   | Switch off  | press button | wait for 7 secs |
| ----------- | ----------- | ----------- | ----------- | ----------- |
| s_off      | s_green/green | _ | _ | _ |
| s_green   | _        | s_off/_     | s_red/red | s_red/red |
| s_red | _ | s_off/_ | s_green/green | s_green/green |


## FSM exercise - solution example test sequence

| Action (input) | Desired output |
| --- | ----------- |
| switch on | green |
| wait for 7 secs | red |
| wait for 7 secs | green |
| press button | red |
| switch off | _ |
| switch on | green |
| press button | red |
| press button | green |
| switch off | _ |

## [Graphwalker](https://graphwalker.github.io/)

* Open source, free MBT tool with GUI
* Easy-to-use
* Good [documentation](https://github.com/GraphWalker/graphwalker-project/wiki)

Working process

1. Creating a model
2. Write adaptation code that interacts with the SUT
3. Generate tests
4. Executing tests

## Graphwalker Studio - Installation and start

1. Fetch the docker image by running `docker pull graphwalker/studio`
2. Run the image `docker run -ti --rm -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v $HOME/.Xauthority:/home/developer/.Xauthority --net=host --pid=host --ipc=host graphwalker/studio`

## Graphwalker Studio - Alternative installation and start
If the previous approach didn't work one can do the following steps

1. [Download](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) and install Java JDK
  * Set `JAVA_HOME` variable in the system env list if not set auatomatically
2. Install model editor [Graphwalker studio](https://graphwalker.github.io/download#studio)

After installation

1. Click on graphwalker studio `graphwalker-studio-4.3.2.jar`
2. Open a web browser and type `http://localhost:9090/studio.html`

## Graphwalker Studio - Battery operated signal example